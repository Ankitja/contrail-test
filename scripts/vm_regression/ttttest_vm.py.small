import traffic_tests
from vn_test import *
from vm_test import *
from floating_ip import *
from policy_test import *
from multiple_vn_vm_test import *
from tcutils.wrappers import preposttest_wrapper
sys.path.append(os.path.realpath('tcutils/pkgs/Traffic'))
from traffic.core.stream import Stream
from traffic.core.profile import create, ContinuousProfile
from traffic.core.helpers import Host
from traffic.core.helpers import Sender, Receiver
from base import BaseVnVmTest
from common import isolated_creds
import inspect

class TestBasicVMVN0(BaseVnVmTest):
    _interface = 'json'

    @classmethod
    def setUpClass(cls):
        super(TestBasicVMVN0, cls).setUpClass()

    def runTest(self):
        pass
    #end runTes 
    @preposttest_wrapper
    def test_disassociate_vn_from_vm(self):
        ''' Test to validate that disassociating a VN from a VM fails.
        '''
        vm1_name='vm_mine'
        #vn_name='vn222'
        ts = time.time()
        vn_name = '%s_%s'%(inspect.stack()[0][3],str(ts))
        vn_subnets=['11.1.1.0/24']
        vn_fixture= self.useFixture(VNFixture(project_name= self.project.project_name, connections= self.connections,
                     vn_name=vn_name, inputs= self.inputs, subnets= vn_subnets))
        assert vn_fixture.verify_on_setup()
        vn_obj= vn_fixture.obj
        vm1_fixture= self.useFixture(VMFixture(connections= self.connections,
                vn_obj=vn_obj, vm_name= vm1_name, project_name= self.project.project_name))
        assert vm1_fixture.verify_on_setup()
        try:
            self.logger.info(' Will try deleting the VN now')
            self.vnc_lib.virtual_network_delete(vn_obj['network']['contrail:fq_name'])
            assert vn_fixture.verify_on_setup()
            assert vm1_fixture.verify_on_setup()
        except RefsExistError as e:
            self.logger.info( 'RefsExistError:Check passed that the VN cannot be disassociated/deleted when the VM exists')

        return True
    #end test_disassociate_vn_from_vm

    @preposttest_wrapper
    def test_duplicate_vn_add(self):
        '''Test to validate adding a Duplicate VN creation and deletion.
        '''
        ts = time.time()
        vn_name = '%s_%s'%(inspect.stack()[0][3],str(ts))
        vn_obj1 = self.useFixture( VNFixture(project_name= self.project.project_name,
                connections= self.connections,vn_name=vn_name, inputs = self.inputs
                ,subnets=['22.1.1.0/24'] ))
        assert vn_obj1.verify_on_setup()
        assert vn_obj1

        vn_obj2 = self.useFixture( VNFixture(project_name= self.project.project_name,
                  connections= self.connections,vn_name=vn_name, inputs= self.inputs,
                  subnets=['22.1.1.0/24'] ))
        assert vn_obj2.verify_on_setup()
        assert vn_obj2, 'Duplicate VN cannot be created'
        if (vn_obj1.vn_id == vn_obj2.vn_id):
            self.logger.info('Same obj created')
        else:
            self.logger.error('Different objs created.')
        return True
    #end test_duplicate_vn_add

class TestBasicVMVN1(BaseVnVmTest):
    _interface = 'json'

    @classmethod
    def setUpClass(cls):
        super(TestBasicVMVN1, cls).setUpClass()

    def runTest(self):
        pass
    #end runTes 

    @preposttest_wrapper
    def test_ipam_add_delete(self):
        '''Test to validate IPAM creation, association of a VN and creating VMs in the VN. Ping b/w the VMs should be successful.
        '''
#        proj_name='ipam_add_delete'
        ipam_name = 'test_ipam'
        vnc_lib = self.connections.vnc_lib
        project_obj = self.useFixture(ProjectFixture(vnc_lib_h= vnc_lib, connections= self.connections))
        ipam_obj=self.useFixture( IPAMFixture(project_obj= self.project, name= ipam_name))
        assert ipam_obj.verify_on_setup()
        ts = time.time()
        vn_name = '%s_%s'%(inspect.stack()[0][3],str(ts))
        vn_fixture=self.useFixture( VNFixture(project_name= self.project.project_name , connections= self.connections,
                                 vn_name= vn_name, inputs= self.inputs, subnets=['22.1.1.0/24'],
                                 ipam_fq_name = ipam_obj.fq_name))
        assert vn_fixture.verify_on_setup()

        vm1_fixture= self.useFixture(VMFixture(connections= self.connections,
               vn_obj = vn_fixture.obj, vm_name= 'vm1',project_name= self.project.project_name))
        vm2_fixture = self.useFixture(VMFixture(connections= self.connections,vn_obj = vn_fixture.obj,
                      vm_name= 'vm2',project_name= self.project.project_name))
        assert vm1_fixture.verify_on_setup()
        assert vm2_fixture.verify_on_setup()

        self.nova_fixture.wait_till_vm_is_up( vm1_fixture.vm_obj )
        self.nova_fixture.wait_till_vm_is_up( vm2_fixture.vm_obj )
        assert vm1_fixture.ping_to_ip( vm2_fixture.vm_ip )

        return True

   #end test_ipam_add_delete

