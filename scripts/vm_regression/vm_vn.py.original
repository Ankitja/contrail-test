# Need to import path to test/fixtures and test/scripts/
# Ex : export PYTHONPATH='$PATH:/root/test/fixtures/:/root/test/scripts/'
# 
# To run tests, you can do 'python -m testtools.run tests'. To run specific tests,
# You can do 'python -m testtools.run -l tests'
# Set the env variable PARAMS_FILE to point to your ini file. Else it will try to pick params.ini in PWD
# 
from novaclient import client as mynovaclient
from novaclient import exceptions as novaException
import traffic_tests
from contrail_test_init import *
from vn_test import *
from quantum_test import *
from vnc_api_test import *
from nova_test import *
from vm_test import *
from connections import ContrailConnections
from floating_ip import *
from policy_test import *
from multiple_vn_vm_test import *
from contrail_fixtures import *
from tcutils.wrappers import preposttest_wrapper
sys.path.append(os.path.realpath('tcutils/pkgs/Traffic'))
from traffic.core.stream import Stream
from traffic.core.profile import create, ContinuousProfile
from traffic.core.helpers import Host
from traffic.core.helpers import Sender, Receiver
from base import BaseVnVmTest
from common import isolated_creds

#from analytics_tests import *
class TestVMVN(BaseVnVmTest):
    
    def setUp(self):
        super(TestVMVN, self).setUp()  
    #end setUpClass
    
    def cleanUp(self):
        super(TestVMVN, self).cleanUp()
    #end cleanUp
    
    def runTest(self):
        pass
    #end runTest

    
    @preposttest_wrapper
    def test_vn_add_delete(self):
        '''Test to validate VN creation and deletion.
        '''
        vn_obj=self.useFixture( VNFixture(project_name= self.project.project_name, 
				connections= self.isolated_creds.get_conections(),
                               vn_name='vn22', inputs= self.isolated_creds.get_inputs()
			       , subnets=['22.1.1.0/24'] ))
        assert vn_obj.verify_on_setup()
        assert vn_obj
        return True
    #end 

#    @preposttest_wrapper
#    def test_vm_add_delete(self):
#        ''' Test to validate that a VM creation and deletion passes.
#        '''
#        vm1_name='vm_mine'
#        vn_name='vn222'
#        vn_subnets=['11.1.1.0/24']
#        dct=self.get_project_inputs_connections(project_name='vm_add_delete',user = 'test1',password='contrail123')
#        vn_fixture= self.useFixture(VNFixture(project_name= 'vm_add_delete', connections= dct['connections'],
#                     vn_name=vn_name, inputs= dct['inputs'], subnets= vn_subnets))
#        assert vn_fixture.verify_on_setup()
#        vn_obj= vn_fixture.obj
#        vm1_fixture= self.useFixture(VMFixture(connections= dct['connections'],
#                vn_obj=vn_obj, vm_name= vm1_name, project_name= 'vm_add_delete',ram = '4096',image_name= 'ubuntu-traffic'))
#        assert vm1_fixture.verify_on_setup()
#        return True
#    #end test_vm_add_delete
#	
#    @preposttest_wrapper
#    def test_ipam_add_delete(self):
#        '''Test to validate IPAM creation, association of a VN and creating VMs in the VN. Ping b/w the VMs should be successful.
#        '''
#        proj_name='ipam_add_delete'
#        ipam_name = 'test_ipam'
#        dct=self.get_project_inputs_connections(project_name=proj_name ,user = 'test1',password='contrail123')
#        vnc_lib = dct['connections'].vnc_lib 
#        project_obj = self.useFixture(ProjectFixture(vnc_lib_h= vnc_lib, connections= dct['connections']))
#        ipam_obj=self.useFixture( IPAMFixture(project_obj= dct['project'], name= ipam_name))
#        assert ipam_obj.verify_on_setup()
#        vn_fixture=self.useFixture( VNFixture(project_name= proj_name , connections= dct['connections'],
#                                 vn_name='vn22', inputs= dct['inputs'], subnets=['22.1.1.0/24'], ipam_fq_name = ipam_obj.fq_name))
#        assert vn_fixture.verify_on_setup()
#
#        vm1_fixture= self.useFixture(VMFixture(connections= dct['connections'],
#               vn_obj = vn_fixture.obj, vm_name= 'vm1',project_name= proj_name))
#        vm2_fixture= self.useFixture(VMFixture(connections= dct['connections'],
#                vn_obj = vn_fixture.obj,vm_name= 'vm2',project_name= proj_name))
#        assert vm1_fixture.verify_on_setup()
#        assert vm2_fixture.verify_on_setup()
#
#        self.nova_fixture.wait_till_vm_is_up( vm1_fixture.vm_obj )
#        self.nova_fixture.wait_till_vm_is_up( vm2_fixture.vm_obj )
#        assert vm1_fixture.ping_to_ip( vm2_fixture.vm_ip )
#
#        return True
#    #end test_ipam_add_delete
# 
#    @preposttest_wrapper
#    def test_duplicate_vn_add(self):
#        '''Test to validate adding a Duplicate VN creation and deletion.
#        '''
#        dct=self.get_project_inputs_connections(project_name='duplicate_vn_add',user = 'test1',password='contrail123')
#        vn_obj1=self.useFixture( VNFixture(project_name= 'duplicate_vn_add', connections= dct['connections'],
#                     vn_name='vn22', inputs= dct['inputs'], subnets=['22.1.1.0/24'] ))
#        assert vn_obj1.verify_on_setup()
#        assert vn_obj1
#        
#        vn_obj2=self.useFixture( VNFixture(project_name= 'duplicate_vn_add', connections= dct['connections'],
#                     vn_name='vn22', inputs= dct['inputs'], subnets=['22.1.1.0/24'] ))
#        assert vn_obj2.verify_on_setup()
#        assert vn_obj2, 'Duplicate VN cannot be created'
#        if (vn_obj1.vn_id == vn_obj2.vn_id):
#            self.logger.info('Same obj created')
#        else:
#            self.logger.error('Different objs created.')
#        return True
    #end test_duplicate_vn_add
class TestVMVNXML(TestVMVN):
#    _interface = 'xml'
    pass
    
